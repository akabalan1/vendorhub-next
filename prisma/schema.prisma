// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  VIEWER
  CONTRIBUTOR
  ADMIN
}

enum ServiceOption {
  WHITE_GLOVE
  CROWD_SOURCED
  FTE
}

model Vendor {
  id                 String          @id @default(cuid())
  name               String          @unique
  overview           String?
  website            String?
  country            String?
  regions            String[]        @db.Text
  platforms          String[]        @db.Text
  industries         String[]        @db.Text
  serviceOptions     ServiceOption[] @default([])

  raterTrainingSpeed String?

  status     String   @default("active")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  costTiers  CostTier[]
  caps       VendorCapability[]
  feedback   Feedback[]
}

model Capability {
  id      String @id @default(cuid())
  slug    String @unique
  name    String
  desc    String?
  vendors VendorCapability[]
}

model VendorCapability {
  vendor   Vendor     @relation(fields: [vendorId], references: [id])
  vendorId String
  cap      Capability @relation(fields: [capId], references: [id])
  capId    String

  @@id([vendorId, capId])
}

model CostTier {
  id           String  @id @default(cuid())
  vendor       Vendor  @relation(fields: [vendorId], references: [id])
  vendorId     String
  tierLabel    String
  hourlyUsdMin Float?
  hourlyUsdMax Float?
  currency     String  @default("USD")
  notes        String?
}

model Feedback {
  id            String   @id @default(cuid())
  vendor        Vendor   @relation(fields: [vendorId], references: [id])
  vendorId      String
  author        String?
  ratingQuality Int?
  ratingSpeed   Int?
  ratingComm    Int?
  text          String?
  tags          String[] @db.Text
  link          String?
  isPrivate     Boolean  @default(false)
  createdAt     DateTime @default(now())
}

/* ---------- NextAuth models (standard) ---------- */
model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?

  // Custom for RBAC
  isAdmin       Boolean  @default(false)

  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
